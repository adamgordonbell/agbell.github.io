<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Cascade Of Insights</title>
        <link></link>
        <description><![CDATA[Adam Bell's blog]]></description>
        <atom:link href="/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 30 Aug 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>Graham’s scan algorithm for the convex hull</title>
    <link>/posts/2021-08-30-grahams-scan.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Graham’s scan algorithm for the convex hull
  </h2>
  <p class="blog-post-meta">
    <span class="date">2021-08-30</span> - <span class="tags"><a href="/tags/haskell.html">haskell</a></span>
  <p><span>Using the code from the preceding three exercises, implement Graham’s scan algorithm for the convex hull of a set of 2D points. You can find good description of what a</span> <a href="http://en.wikipedia.org/wiki/Convex_hull">convex hull</a><span>. is, and how the</span> <a href="http://en.wikipedia.org/wiki/Graham_scan">Graham scan algorithm</a> <span>should work, on</span> <a href="http://en.wikipedia.org/">Wikipedia</a></p>
<p><a href="http://book.realworldhaskell.org/read/defining-types-streamlining-functions.html" class="uri">http://book.realworldhaskell.org/read/defining-types-streamlining-functions.html</a></p>
<pre>{- - Implementation of the Graham scanÂ¹ to find the convex hullÂ² of - some given two dimensional points. - The 12th exercise of the chapter 3 in the Real World Haskell bookÂ³. - - [1] : [http://en.wikipedia.org/wiki/Graham_scan](http://en.wikipedia.org/wiki/Graham_scan) - [2] : [http://en.wikipedia.org/wiki/Convex_hull](http://en.wikipedia.org/wiki/Convex_hull) - [3] : [http://book.realworldhaskell.org/](http://book.realworldhaskell.org/) - -} data Direction = Clockwise | CounterClockwise | Straight deriving (Eq, Show) data Point = Point Double Double deriving (Eq, Show) grahamScan :: [Point] -> [Point] grahamScan = combineList . tripleList combineList :: [(Point, Point, Point)] -> [Point] combineList x = map (\(_, y, _) -> y) x --select p (first element) and then sort rest putting p at front and back of list sortCombine :: [Point] -> [Point] sortCombine x = list ++ ((head list):[]) where list = sortSlope (sortPoint x) -- sort list of points by y then x -- head of list is P - starting element sortPoint :: [Point] -> [Point] sortPoint x = sortBy (\ (Point x1 y1) (Point x2 y2) -> (compare y1 y2) `mappend` (compare x1 x2)) x --slope of a line slope :: Point -> Point -> Double slope (Point x1 y1) (Point x2 y2) = y1 - y2 / x1 - x2 --sort by slope of line formed from p to all other elements and leave p at front sortSlope :: [Point] -> [Point] sortSlope (x:xs) = x : sortBy (\ i j -> (compare (slope x i) (slope x j))) xs --we triple the list so we can look at previous and next for each element and eliminate it if it is clockwise tripleList :: [Point] -> [(Point, Point, Point)] tripleList x = (p,p,p) : (filter grahamScanFilter (zip3 list (tail list) (tail (tail list)))) where list = sortCombine x p = head (sortPoint x) grahamScanFilter (x, y, z) = direction x y z == CounterClockwise -- get direction - cribbed from wikipedia pseudocode direction (Point x1 y1) (Point x2 y2) (Point x3 y3) = if ccw > 0 then CounterClockwise else if ccw < 0 then Clockwise else Straight where ccw = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)	</pre>
</div>
]]></description>
    <pubDate>Mon, 30 Aug 2021 00:00:00 UT</pubDate>
    <guid>/posts/2021-08-30-grahams-scan.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Hakyll and CircleCi</title>
    <link>/posts/2015-07-31-hakyll-and-circleci.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Hakyll and CircleCi
  </h2>
  <p class="blog-post-meta">
    <span class="date">2015-07-31</span> - <span class="tags"><a href="/tags/blog.html">blog</a>, <a href="/tags/hakyll.html">hakyll</a>, <a href="/tags/ci.html">ci</a>, <a href="/tags/haskell.html">haskell</a></span>
  <p>This blog was on tumblr, which was easy to setup and post and such. However, I spend like 8 hours a day with a text editor open and a git in terminal window. Also I’m always look for an excuse to use haskell. So I’m moving things over to <a href="http://jaspervdj.be/hakyll/">Hakyll</a>. I followed <a href="http://www.stackbuilders.com/news/dr-hakyll-create-a-github-page-with-hakyll-and-circleci">this great tutorial</a> on how to setup things up with CircleCI, so now I just commit and push and my site updates.</p>
<p>So far, so good.</p>
</div>
]]></description>
    <pubDate>Fri, 31 Jul 2015 00:00:00 UT</pubDate>
    <guid>/posts/2015-07-31-hakyll-and-circleci.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Lazy Evaluation In Haskell</title>
    <link>/posts/2015-01-14-lazy-evaluation.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Lazy Evaluation In Haskell
  </h2>
  <p class="blog-post-meta">
    <span class="date">2015-01-14</span> - <span class="tags"></span>
  <p><em>This post is a work in progress and represents my getting to understand how laziness works in haskell and how it affects performance.</em></p>
<p>Summary of Laziness:</p>
<p>Lazy is good when:</p>
<ul>
<li>You are not going to use all the results</li>
<li>Because you are going to filter some things out at a later stage</li>
</ul>
<p>Strict is good otherwise.<br />
Hence:</p>
<ul>
<li>foldl’ for spine-strict results (Int, Map, …),</li>
<li>foldr for spine-lazy results (mostly just [a]),</li>
<li>Never use foldl</li>
</ul>
<p>The key insight for me has been understanding that lazy evaluation means that functions take in a pointer to a thunk as arguments and then return a thunk as a value. Only looking inside those thunks inputs (via pattern matching or IO) actually forces anything.</p>
<p>This level of indirection improves composability, you can generate than reduce in a more modular fashion with only some constant overhead for holding on to thunks. The paper “why functional programming matters” has a great explanation of this.</p>
<p>This all works because whenever you throw something away with <em>i.e. f (a,</em>) = a, the pointer to the thunk, that was never evaluated, and all the evaluations that follow from can get garbage collected away.</p>
<p>This how foldr can short-circuit on some lazy list, if a condition of f that is passed in doesn’t care about the rest of the list, then we are done.</p>
<p><span>Links:</span></p>
<ul>
<li><a href="http://blog.ezyang.com/category/haskell/haskell-heap/">Ez Yang : how the heap works</a></li>
<li><a href="http://www.haskellforall.com/2014/10/how-to-desugar-haskell-code.html" class="uri">http://www.haskellforall.com/2014/10/how-to-desugar-haskell-code.html</a></li>
<li><a href="http://www.haskell.org/haskellwiki/Performance/Strictness" class="uri">http://www.haskell.org/haskellwiki/Performance/Strictness</a></li>
<li><a href="http://en.wikibooks.org/wiki/Haskell/Laziness" class="uri">http://en.wikibooks.org/wiki/Haskell/Laziness</a></li>
<li><a href="http://en.wikibooks.org/wiki/Haskell/Laziness#Black-box_strictness_analysis" class="uri">http://en.wikibooks.org/wiki/Haskell/Laziness#Black-box_strictness_analysis</a></li>
</ul>
</div>
]]></description>
    <pubDate>Wed, 14 Jan 2015 00:00:00 UT</pubDate>
    <guid>/posts/2015-01-14-lazy-evaluation.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Incrementing</title>
    <link>/posts/2014-03-15-incrementing.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Incrementing
  </h2>
  <p class="blog-post-meta">
    <span class="date">2014-03-15</span> - <span class="tags"><a href="/tags/paul-graham.html">paul-graham</a>, <a href="/tags/haskell.html">haskell</a></span>
  <p>In <a href="http://www.paulgraham.com/icad.html">an old essay</a>, Paul Graham, talks about how some languages are more succinct and therefore they are more powerful. In fact, some programming languages can say things that you can’t easily say in others. Maybe you can’t say them at all. Its a good essay overall, you should read it.</p>
<p>His Example:</p>
<blockquote>
<p>Write a function that takes a number n, and returns a function that takes another number i and returns n incremented by i.</p>
</blockquote>
<p>I think this example is, maybe, unfairly biased towards functional programming languages, and its no surprise that pg shows us that lisp has the shortest implementation.</p>
<p>It works as a good example, however, because it shows us a concrete demonstration where one language can easily do something (lisp), that others languages are not able to do at all (java).</p>
<p>Let me try this in haskell.</p>
<p>So in Haskell, the type of this function f would be:</p>
<blockquote>
<p>f :: Num a =&gt; a -&gt; ( a -&gt; a)</p>
</blockquote>
<p>meaning f takes a number and returns a function that takes a number and returns another number.</p>
<p>Since the brackets are right associative, we can drop them to get:</p>
<blockquote>
<p>f :: Num a =&gt; a -&gt; a -&gt; a</p>
</blockquote>
<p>This is because, in haskell, all functions are considered curried and can be partially applied. Even basic numerical functions like + - / if given one argument will return a function that excepts the next argument.</p>
<p>For example:</p>
<blockquote>
<blockquote>
<p>:t (+)</p>
</blockquote>
<p>(+) :: Num a =&gt; a -&gt; a -&gt; a</p>
<blockquote>
<p>:t (+) 4<br />
(+) 4 :: Num a =&gt; a -&gt; a</p>
</blockquote>
</blockquote>
<p>So (+) 4 returns a function that takes a number and then adds 4 for to it. (<em>I mean, I guess technically, it doesn’t add 4 to it, but returns a new number that is the sum of them, but I think I am still capturing the spirit of the exercise here. Haskell variables are not mutable.)<br />
</em></p>
<p>What all of this means, if I haven’t already telegraphed the punchline, is that the complete haskell solution is:</p>
<blockquote>
<p>f = (+)</p>
</blockquote>
<p>So, in haskell, we don’t need to write this function. We can just use +.</p>
<p>I think that is pretty cool.</p>
</div>
]]></description>
    <pubDate>Sat, 15 Mar 2014 00:00:00 UT</pubDate>
    <guid>/posts/2014-03-15-incrementing.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>How to get bluetooth working in windows 8 / 8.1 on various thinkpads</title>
    <link>/posts/2014-02-20-bluetooth-thinkpad-w520.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    How to get bluetooth working in windows 8 / 8.1 on various thinkpads
  </h2>
  <p class="blog-post-meta">
    <span class="date">2014-02-20</span> - <span class="tags"><a href="/tags/thinkpad.html">thinkpad</a>, <a href="/tags/bluetooth.html">bluetooth</a></span>
  <div class="figure">
<img src="/images/tumblr_n1aynyeIzo1qe4yfuo1_500.jpg" alt="" />

</div>
<blockquote>
<p><strong>How to get bluetooth working in windows 8 / 8.1 on various thinkpads.</strong></p>
</blockquote>
<p>Currently, the thinkpads ( w520 for sure, but lots of complaints about others online) do not have working bluetooth drivers. Or rather the driver exists, but getting the bluetooth to turn on is not possible.</p>
<p>I have put together a solution here:</p>
<p><a href="https://dl.dropboxusercontent.com/u/7773580/lenovo/Adams%20bt%20enable.zip">https://dl.dropboxusercontent.com/u/7773580/lenovo/Adams%20bt%20enable.zip</a></p>
<p>This zip has to batch files that will turn on or off the blue tooth device. It uses the hotkey exe from the windows 7 Lenove hotkey app to force the bluetooth on.</p>
<p>It also contains a bluetooth driver, the one I originally used, however I recommend instead that you go straight to broadcom here:</p>
<p><a href="http://www.broadcom.com/support/bluetooth/update.php" class="uri">http://www.broadcom.com/support/bluetooth/update.php</a></p>
</div>
]]></description>
    <pubDate>Thu, 20 Feb 2014 00:00:00 UT</pubDate>
    <guid>/posts/2014-02-20-bluetooth-thinkpad-w520.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Truly Ergonomic Keyboard</title>
    <link>/posts/2013-11-28-truly-ergonomic-keyboard.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Truly Ergonomic Keyboard
  </h2>
  <p class="blog-post-meta">
    <span class="date">2013-11-28</span> - <span class="tags"><a href="/tags/keyboard.html">keyboard</a></span>
  <div class="figure">
<img src="http://40.media.tumblr.com/33a4ee15af3bce76dafa18a526b9d383/tumblr_mwz6ecK0jE1qe4yfuo1_500.jpg" alt="" />

</div>
<div class="figure">
<img src="http://41.media.tumblr.com/646b8559a7ae8978dacd30c70fc527cc/tumblr_mwz6ecK0jE1qe4yfuo2_500.jpg" alt="" />

</div>
<blockquote>
<p><strong>I got my new teck keyboard from massdrop. It takes some getting used to, but I’m already typing faster. <a href="https://github.com/agbell/TECK">Check out the autohotkey script I used to ease the transition.</a></strong></p>
</blockquote>
<div id="text-1" class="outline-text-2">
<p>In my effort to become a better touch typer, I began looking into ergnomic and mechanical keyboards. The cream of the crop for ergonomic symetric mechanical keyboards appears to be the <a href="http://ergodox.org/">ergodox</a>. It is open source hardware, so you basically have to order the parts your self and get out your soldering gun. They sell these in kit form all the time on massdrop, but this seemed like a little more effort than I wanted to put into a keyboard at this juncture, so when <a href="http://massdrop.com">massdrop</a> did a mass buy for the so call <a href="https://www.trulyergonomic.com/store/index.php">Truly Ergonomic Keyboard</a>, which is a compromise between a traditional keyboard and ergodox, I jumped on it and got my TECK as 25% off.</p>
<p>Keyboard arrived very quickly from massdrop and I’ve been using it full time for about a month now. I made some modifications to the keymapping using the the included software, switching the control and shift keys to more traditional spots. I also used AutoHotkey on windows and xcape on Ubuntu to get my right control to work as an enter key if pressed alone and some other similar tweaks.</p>
</div>
<h3 id="notes-from-first-week-of-use."><span class="section-number-3"></span>Notes from first week of use.</h3>
<div id="outline-container-1-1-1" class="outline-4">
<ul>
<li><h4 id="having-the-shift-keys-on-home-row-is-very-smart">Having the shift keys on home row is very smart</h4></li>
</ul>
<blockquote>
<div id="text-1-1-1" class="outline-text-4">
but i want to be backward compatible with traditional keyboards so switched it back
</div>
</blockquote>
</div>
<div id="outline-container-1-1-2" class="outline-4">
<ul>
<li><h4 id="enter-is-middle-is-great"><span class="section-number-4"></span>enter is middle is great</h4></li>
</ul>
</div>
<div id="outline-container-1-1-3" class="outline-4">
<ul>
<li><h4 id="delete-and-backspace-take-getting-used-to"><span class="section-number-4"></span>delete and backspace take getting used to</h4></li>
</ul>
</div>
<div id="outline-container-1-1-4" class="outline-4">
<ul>
<li><h4 id="quotes-key-in-new-place-is-great-for-typing-text-but-not-good-with-vim-and-the-shell"><span class="section-number-4"></span>quotes key in new place is great for typing text, but not good with VIM and the shell</h4></li>
</ul>
</div>
<h2 id="backwards-compatible-tweaks">Backwards compatible tweaks</h2>
<p>I want to be able to use normal keyboards when I have to, so I made some tweaks to the TECK keyboard to keep it close to default layout.</p>
<ul>
<li><p>switched key caps - CTRL and SHIFT</p></li>
<li><p>right control is enter if pressed alone</p></li>
<li><p>left control is ESC alone (vimness) means my control is like my old caps lock</p></li>
<li><p>tried mapping shift on its own to tab, but messed up my shift tabbing</p></li>
</ul>
<p><strong>References:</strong></p>
<ul>
<li><a href="https://github.com/agbell/TECK">My Autohotkey scripts for the TECK</a></li>
<li><a href="https://www.trulyergonomic.com/store/index.php">TECK website</a></li>
<li><a href="http://ergodox.org/">ErgoDox</a></li>
</ul>
</div>
]]></description>
    <pubDate>Thu, 28 Nov 2013 00:00:00 UT</pubDate>
    <guid>/posts/2013-11-28-truly-ergonomic-keyboard.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Emacs Client on Windows 8</title>
    <link>/posts/2013-10-28-emacs-client-on-windows.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Emacs Client on Windows 8
  </h2>
  <p class="blog-post-meta">
    <span class="date">2013-10-28</span> - <span class="tags"><a href="/tags/emacs.html">emacs</a>, <a href="/tags/windows.html">windows</a></span>
  <p>Problem:</p>
<p>I want to use emacs like I use notepadd++ on windows.</p>
<p><span>That is:</span></p>
<ul>
<li>Right click menu item to “edit with Emacs”</li>
<li>Associate file types with emacs (like .org)</li>
<li>Have only one emacs open at a time</li>
</ul>
<p>Here are the steps I took:</p>
<ol style="list-style-type: decimal">
<li><p>Create the context menu like this (<a href="http://www.emacswiki.org/emacs/MsWindowsGlobalContextMenu">global_context_emacs.reg</a>) :</p>
<pre><code>REGEDIT4
[HKEY_CLASSES_ROOT\*\shell]

[HKEY_CLASSES_ROOT\*\shell\openwemacs]
@=&quot;&amp;GNU Emacs&quot;
# The above value appears in the global context menu, # i.e., when you right click on a file.
# (The &#39;&amp;&#39; makes the next character a shortcut.) &quot;Icon&quot;=&quot;C:\\Program Files\\Emacs\\bin\\emacs.exe,0&quot;
# The above uses the icon of the Emacs exe for the context # and should match the path used for the command below.
# The ,0 selects the main icon. [HKEY_CLASSES_ROOT\*\shell\openwemacs\command]
@=&quot;C:\\Program Files\\Emacs\\bin\\runemacs.exe \&quot;%1\&quot;&quot;
# The above has to point to where you install Emacs  </code></pre></li>
<li><p><span>Create a batch file called runclientw.bat and compile to exe and associate file types as needed. See <a href="http://robert-adesam.blogspot.ca/2011/01/emacsclient-setup-on-windows-7-starter.html">here</a></span></p></li>
</ol>
</div>
]]></description>
    <pubDate>Mon, 28 Oct 2013 00:00:00 UT</pubDate>
    <guid>/posts/2013-10-28-emacs-client-on-windows.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Project Euler Problem 19</title>
    <link>/posts/2012-11-09-euler19.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Project Euler Problem 19
  </h2>
  <p class="blog-post-meta">
    <span class="date">2012-11-09</span> - <span class="tags"><a href="/tags/euler.html">euler</a>, <a href="/tags/haskell.html">haskell</a></span>
  <blockquote>
<p><span>How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</span></p>
<p><a href="http://projecteuler.net/problem=19" class="uri">http://projecteuler.net/problem=19</a></p>
</blockquote>
<p>By Hand:</p>
<p>There are 12 * 100 first of the months, 1/7 of them fall on sundays, therefore euler19 = 1200/7 ~= 171</p>
<p>In haskell:</p>
<div class="highlight">
<pre>euler19 = length $ filter isSunday [(year,month) | year <- [1901..2000], month <- [1..12]] isSunday :: (Integer,Int) -> Bool isSunday (year, month) = isSunday1 $ toWeekDate $ fromGregorian year month 01 where isSunday1 (_,_,7) = True isSunday1 _ = False </pre>
</div>
</div>
]]></description>
    <pubDate>Fri, 09 Nov 2012 00:00:00 UT</pubDate>
    <guid>/posts/2012-11-09-euler19.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>"Functor is to Lens as Applicative is to Biplate"</title>
    <link>/posts/2012-10-15-functor-is-to-lens-as.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    "Functor is to Lens as Applicative is to Biplate"
  </h2>
  <p class="blog-post-meta">
    <span class="date">2012-10-15</span> - <span class="tags"><a href="/tags/haskell.html">haskell</a>, <a href="/tags/haskell-is-hard.html">haskell-is-hard</a></span>
  <p>“Functor is to Lens as Applicative is to Biplate”</p>
<ul>
<li><em><a href="http://front.math.ucdavis.edu/1103.2841" class="uri">http://front.math.ucdavis.edu/1103.2841</a></em></li>
</ul>
<p>Haskell, the language with seemingly endless new concepts to learn about</p>
</div>
]]></description>
    <pubDate>Mon, 15 Oct 2012 00:00:00 UT</pubDate>
    <guid>/posts/2012-10-15-functor-is-to-lens-as.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>
<item>
    <title>Euler 11 in haskell</title>
    <link>/posts/2012-09-15-euler11.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    Euler 11 in haskell
  </h2>
  <p class="blog-post-meta">
    <span class="date">2012-09-15</span> - <span class="tags"><a href="/tags/euler.html">euler</a>, <a href="/tags/haskell.html">haskell</a></span>
  <blockquote>
<p><span>What is the greatest product of four adjacent numbers in any direction (up, down, left, right, or diagonally) in the 20</span><img src="http://projecteuler.net/images/symbol_times.gif" alt="×" /><span>20 grid?</span></p>
<p><a href="http://projecteuler.net/problem=11" class="uri">http://projecteuler.net/problem=11</a></p>
</blockquote>
<p>It took me forever to find out that transpose existed and that I could use zipWith to get a diagonal - but after that its gets easy.</p>
<pre>euler11 = maximum(	(maxGridProduct q10Grid) --max of row products :(maxGridProduct $ transpose q10Grid) --max of column products :(maxGridProduct $ diagonalGrid q10Grid)	--max of first diagonal :(maxGridProduct $ diagonalGrid $map reverse q10Grid)	--max of second diagonal :(maxGridProduct $ diagonalGrid $ transpose q10Grid)	--max of first transposed :(maxGridProduct $ diagonalGrid $map reverse $ transpose q10Grid)--max of second : [] ) maxGridProduct :: [[Int]] -> Int maxGridProduct grid = maximum $ map maxRowProduct grid maxRowProduct :: [Int] -> Int maxRowProduct line = maximum . map (product . take 4) $ tails $ line diagonalGrid grid = map (diagonalRow grid) [0..(length grid)] diagonalRow :: [[Int]] -> Int -> [Int] diagonalRow grid offset = zipWith (!!) grid [offset .. max] where len = length $ grid!!0 max = len - 1 q10Grid ::[[Int]] q10Grid = map (map read) $ stringNum where stringNum = map words $ lines " \ \08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n \ \49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n \ \81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n \ \52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n \ \22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n \ \24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n \ \32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n \ \67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n \ \24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n \ \21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n \ \78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n \ \16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n \ \86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n \ \19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n \ \04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n \ \88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n \ \04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n \ \20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n \ \20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n \ \01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48" </pre>
</div>
]]></description>
    <pubDate>Sat, 15 Sep 2012 00:00:00 UT</pubDate>
    <guid>/posts/2012-09-15-euler11.html</guid>
    <dc:creator>Adam Bell</dc:creator>
</item>

    </channel>
</rss>
